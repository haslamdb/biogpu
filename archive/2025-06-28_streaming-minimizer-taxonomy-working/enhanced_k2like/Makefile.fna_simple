# Makefile for simple FNA test
NVCC = nvcc
CUDA_FLAGS = -std=c++17 -O3 -arch=sm_61 -lineinfo
INCLUDES = -I. -I/usr/local/cuda/include
LIBS = -lcuda -lcudart

# Source files  
TEST_SOURCE = test_fna_simple.cu
CUDA_SOURCES = core/gpu_database_builder_core.cu \
               memory/gpu_memory_manager.cu \
               gpu/gpu_database_kernels.cu \
               processing/minimizer_feature_extractor.cu \
               processing/feature_exporter.cu \
               processing/contamination_detector.cu \
               processing/genome_file_processor.cu \
               taxonomy/taxonomy_processor.cu \
               output/database_serializer.cu

# Object files
TEST_OBJECT = $(TEST_SOURCE:.cu=.o)
CUDA_OBJECTS = $(CUDA_SOURCES:.cu=.o)

# Target
TARGET = test_fna_simple

# Build rules
all: $(TARGET)

$(TARGET): $(TEST_OBJECT) $(CUDA_OBJECTS)
	$(NVCC) $(CUDA_FLAGS) $(INCLUDES) $(TEST_OBJECT) $(CUDA_OBJECTS) -o $(TARGET) $(LIBS)

%.o: %.cu
	$(NVCC) $(CUDA_FLAGS) $(INCLUDES) -c $< -o $@

# Run test
run: $(TARGET)
	./$(TARGET)

# Run with custom FNA file
run-custom: $(TARGET)
	./$(TARGET) $(FNA_FILE)

# Clean
clean:
	rm -f $(TEST_OBJECT) $(CUDA_OBJECTS) $(TARGET)
	rm -rf test_output_fna

.PHONY: all clean run run-custom
cmake_minimum_required(VERSION 3.20)
project(BioGPU VERSION 0.2.0 LANGUAGES CXX CUDA)

# C++ Standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# CUDA Standard
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# Find LLVM (needed for BioGPU compiler)
find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

# LLVM definitions and include directories
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})
link_directories(${LLVM_LIBRARY_DIRS})

# Find ANTLR (needed for BioGPU parser)
find_package(antlr4-runtime REQUIRED)

# Project include directories
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(/usr/include/antlr4-runtime)
include_directories(${CMAKE_SOURCE_DIR}/src/parser)  # For generated headers
include_directories(${CMAKE_SOURCE_DIR}/runtime/kernels/resistance)

# CUDA include directories
if(CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES)
    include_directories(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
endif()

# CUDA library directories
link_directories(/usr/local/cuda/lib64)
link_directories(/usr/local/cuda/targets/x86_64-linux/lib)

# ===========================
# Core BioGPU Compiler
# ===========================

# Core compiler source files
set(COMPILER_SOURCES
    src/compiler/compiler.cpp
    src/codegen/llvm_codegen.cpp
    src/codegen/ast_codegen.cpp
)

# Algorithm library files
set(ALGORITHM_SOURCES
    src/stdlib/algorithms/bloom_cascade.cpp
    src/stdlib/algorithms/minimizer_classifier.cpp
    src/stdlib/algorithms/resistance_attribution.cpp
    src/stdlib/algorithms/resistance_graph.cpp
    src/stdlib/algorithms/resistance_pssm.cpp
)

# Parser source files
set(PARSER_SOURCES
    src/parser/BioGPULexer.cpp
    src/parser/BioGPUParser.cpp
    src/parser/BioGPUBaseVisitor.cpp
    src/parser/biogpu_parser.cpp
    src/parser/ast.cpp
)

# Combine all compiler sources
set(BIOGPU_SOURCES ${COMPILER_SOURCES} ${ALGORITHM_SOURCES} ${PARSER_SOURCES})

# Create main BioGPU compiler executable
add_executable(biogpu src/main.cpp ${BIOGPU_SOURCES})
target_link_libraries(biogpu LLVM-18 antlr4-runtime)

# Enable warnings for compiler
target_compile_options(biogpu PRIVATE 
    -Wall
    $<$<CONFIG:DEBUG>:-g -O0>
    $<$<CONFIG:RELEASE>:-O3>
)

# ===========================
# FQ Resistance Pipeline (GPU)
# ===========================

# FQ pipeline CUDA sources
set(FQ_CUDA_SOURCES
    runtime/kernels/resistance/fixed_kmer_screening.cu
    # runtime/kernels/resistance/fq_mutation_detector.cu  # Needs refactoring to remove HDF5
    # runtime/kernels/resistance/fq_resistance.cu        # Original implementation
)

# FQ pipeline host sources
set(FQ_HOST_SOURCES
    runtime/kernels/resistance/fq_pipeline_host.cpp
)

# Create FQ pipeline executable
add_executable(fq_pipeline_gpu
    ${FQ_HOST_SOURCES}
    ${FQ_CUDA_SOURCES}
)

# Set CUDA properties for FQ pipeline
set_target_properties(fq_pipeline_gpu PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
    CUDA_ARCHITECTURES "61;70;75;80;86"  # Include Titan Xp (61)
)

# CUDA-specific compile options
target_compile_options(fq_pipeline_gpu PRIVATE
    $<$<COMPILE_LANGUAGE:CUDA>:
        --use_fast_math
        --generate-line-info
        -Xcudafe --diag_suppress=esa_on_defaulted_function_ignored
        --ptxas-options=-v
    >
)

# Link libraries for FQ pipeline
target_link_libraries(fq_pipeline_gpu
    z          # for zlib (FASTQ.gz reading)
    cudart
    cuda
)

# ===========================
# Test Executables
# ===========================

option(BUILD_TESTS "Build test executables" ON)
if(BUILD_TESTS)
    # Test executable for CUDA kernels
    if(EXISTS "${CMAKE_SOURCE_DIR}/tests/test_cuda_kernels.cpp")
        add_executable(test_cuda_kernels 
            tests/test_cuda_kernels.cpp
        )
        target_link_libraries(test_cuda_kernels cudart cuda)
    endif()
endif()

# ===========================
# Development Targets
# ===========================

# Build and validate k-mer index
add_custom_target(build_kmer_index
    COMMAND python3 ${CMAKE_SOURCE_DIR}/src/python/enhanced_kmer_builder.py 
            ${CMAKE_SOURCE_DIR}/output/GeneFiles
            ${CMAKE_SOURCE_DIR}/data/Known_Quinolone_Changes.csv
            ${CMAKE_SOURCE_DIR}/data/fq_resistance_index
            --kmer-length 15
    COMMENT "Building enhanced k-mer index"
)

# Validate existing index
add_custom_target(validate_index
    COMMAND python3 ${CMAKE_SOURCE_DIR}/src/python/index_validator.py
            ${CMAKE_SOURCE_DIR}/data/fq_resistance_index
            --create-synthetic
            --test-data ${CMAKE_SOURCE_DIR}/data/test_fastq
    COMMENT "Validating k-mer index with synthetic data"
)

# Run pipeline test
add_custom_target(test_pipeline
    COMMAND python3 ${CMAKE_SOURCE_DIR}/tests/test_pipeline_20250530.py
            --sequences-dir ${CMAKE_SOURCE_DIR}/output/GeneFiles
            --mutations-csv ${CMAKE_SOURCE_DIR}/data/Known_Quinolone_Changes.csv
            --test-data ${CMAKE_SOURCE_DIR}/data/test_fastq
            --output-dir ${CMAKE_SOURCE_DIR}/build/pipeline_test_results
    DEPENDS fq_pipeline_gpu
    COMMENT "Running complete pipeline test"
)

# Test GPU pipeline on real data
add_custom_target(test_gpu_pipeline
    COMMAND ./fq_pipeline_gpu
            ${CMAKE_SOURCE_DIR}/data/fq_resistance_index/kmer_index.bin
            ${CMAKE_SOURCE_DIR}/data/test_fastq/VRE12_R1.fastq.gz
            ${CMAKE_SOURCE_DIR}/data/test_fastq/VRE12_R2.fastq.gz
            ${CMAKE_SOURCE_DIR}/build/gpu_results.json
    DEPENDS fq_pipeline_gpu
    COMMENT "Testing GPU pipeline on VRE12 sample"
)

# ===========================
# Installation Rules
# ===========================

# Install executables
install(TARGETS biogpu fq_pipeline_gpu
    RUNTIME DESTINATION bin
)

# Install headers
install(DIRECTORY include/biogpu
    DESTINATION include
)

# Generate compile_commands.json for IDE support
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ===========================
# Configuration Summary
# ===========================

message(STATUS "")
message(STATUS "BioGPU Configuration Summary:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  CUDA Standard: ${CMAKE_CUDA_STANDARD}")
message(STATUS "  CUDA Architectures: 61;70;75;80;86 (includes Titan Xp)")
message(STATUS "  LLVM Version: ${LLVM_PACKAGE_VERSION}")
message(STATUS "")
message(STATUS "Build targets:")
message(STATUS "  biogpu           - Main BioGPU compiler")
message(STATUS "  fq_pipeline_gpu  - GPU-accelerated FQ resistance detection")
message(STATUS "")
message(STATUS "Development targets:")
message(STATUS "  build_kmer_index - Build k-mer index from gene files")
message(STATUS "  validate_index   - Validate index with synthetic data")
message(STATUS "  test_pipeline    - Run complete pipeline test")
message(STATUS "  test_gpu_pipeline - Test GPU pipeline on real data")
message(STATUS "")
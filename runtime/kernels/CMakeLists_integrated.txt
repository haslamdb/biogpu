# Integrated BioGPU Unified Pipeline CMakeLists.txt
cmake_minimum_required(VERSION 3.18)
project(BioGPUUnifiedPipeline LANGUAGES C CXX CUDA)

# Set standards
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# Set CUDA architectures for RTX A6000 and A5000
set(CMAKE_CUDA_ARCHITECTURES 75 80 86)

# Find packages
find_package(CUDA REQUIRED)
find_package(Threads REQUIRED)
find_package(ZLIB REQUIRED)
find_package(HDF5 REQUIRED COMPONENTS C CXX)
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)

# Global include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/shared
    ${CMAKE_CURRENT_SOURCE_DIR}/resistance
    ${CMAKE_CURRENT_SOURCE_DIR}/genes
    ${CMAKE_CURRENT_SOURCE_DIR}/../common/io
    ${HDF5_INCLUDE_DIRS}
    ${JSONCPP_INCLUDE_DIRS}
    ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
    ${ZLIB_INCLUDE_DIRS}
)

# Link directories
link_directories(${JSONCPP_LIBRARY_DIRS})

# Compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -march=native -fopenmp")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O3 --use_fast_math -Xcompiler -fopenmp")

# ===========================
# Common Components
# ===========================
add_library(biogpu_common STATIC
    ../common/io/streaming_fastq_reader.cpp
    ../common/io/sequence_batch.cpp
)

target_link_libraries(biogpu_common
    ${ZLIB_LIBRARIES}
    Threads::Threads
)

# ===========================
# Shared Components
# ===========================
add_library(biogpu_shared STATIC
    shared/sample_csv_parser.cpp
    shared/bloom_filter.cu
)

set_target_properties(biogpu_shared PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
)

# ===========================
# Resistance Pipeline Wrapper
# ===========================
add_library(resistance_wrapper STATIC
    resistance/CleanResistancePipelineWrapper.cpp
)

# The resistance pipeline needs many components
target_link_libraries(resistance_wrapper
    biogpu_shared
    ${CUDA_LIBRARIES}
    ${HDF5_LIBRARIES}
    ${JSONCPP_LIBRARIES}
    ${ZLIB_LIBRARIES}
)

# ===========================
# AMR Gene Pipeline Library
# ===========================
add_library(amr_gene_pipeline STATIC
    genes/amr_detection_pipeline.cpp
    genes/amr_detection_kernels.cu
    genes/amr_detection_kernels_wrapper.cu
    genes/translated_search_amr.cu
    genes/hdf5_amr_writer.cpp
    genes/clinical_amr_report_generator.cpp
)

set_target_properties(amr_gene_pipeline PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
)

target_link_libraries(amr_gene_pipeline
    biogpu_shared
    ${HDF5_LIBRARIES}
    ${JSONCPP_LIBRARIES}
)

# ===========================
# Unified Pipeline Executable
# ===========================
add_executable(bio_gpu_pipeline
    unified_amr_pipeline_integrated.cpp
)

set_target_properties(bio_gpu_pipeline PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
    CUDA_RESOLVE_DEVICE_SYMBOLS ON
)

target_link_libraries(bio_gpu_pipeline
    biogpu_common
    biogpu_shared
    resistance_wrapper
    amr_gene_pipeline
    ${CUDA_LIBRARIES}
    ${CUDART_LIBRARY}
    ${HDF5_LIBRARIES}
    ${HDF5_CXX_LIBRARIES}
    ${JSONCPP_LIBRARIES}
    ${ZLIB_LIBRARIES}
    Threads::Threads
    stdc++fs
    gomp  # OpenMP
)

# Installation
install(TARGETS bio_gpu_pipeline
    RUNTIME DESTINATION /usr/local/bin
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE 
                GROUP_READ GROUP_EXECUTE 
                WORLD_READ WORLD_EXECUTE
)

# Print configuration
message(STATUS "=== BioGPU Unified Pipeline Configuration ===")
message(STATUS "CUDA Version: ${CUDA_VERSION}")
message(STATUS "HDF5 Version: ${HDF5_VERSION}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "=============================================")
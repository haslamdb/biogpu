# Makefile for refactored fluoroquinolone resistance detection pipeline
CXX = g++
NVCC = nvcc
CXXFLAGS = -std=c++17 -O3 -I../../ -I../../third_party
NVCCFLAGS = -std=c++17 -O3 -arch=sm_70 -I../../ -I../../third_party
LDFLAGS = -lcudart -lz -pthread

# Common source files
COMMON_SOURCES = \
    ../../common/io/streaming_fastq_reader.cpp \
    ../../common/io/sequence_batch.cpp \
    ../../common/io/sample_csv_parser.cpp \
    ../../common/gpu/gpu_sequence_buffer.cu \
    ../../common/gpu/bloom_filter.cu \
    ../../common/config/unified_config.cpp \
    ../../common/pipeline/pipeline_base.cpp

# Resistance-specific source files
RESISTANCE_SOURCES = \
    global_fq_resistance_mapper.cpp \
    resistance_pipeline_v2.cpp

# CUDA source files
CUDA_SOURCES = \
    gpu_diagnostic_adapters.cu \
    fq_mutation_detector.cu \
    kmer_resistance_mapper.cu \
    translated_resistance_search.cu

# Object files
COMMON_OBJS = $(COMMON_SOURCES:.cpp=.o)
COMMON_OBJS := $(COMMON_OBJS:.cu=.o)
RESISTANCE_OBJS = $(RESISTANCE_SOURCES:.cpp=.o)
CUDA_OBJS = $(CUDA_SOURCES:.cu=.o)

# Targets
TARGETS = test_resistance_pipeline_v2 benchmark_resistance_v2

all: $(TARGETS)

test_resistance_pipeline_v2: test_resistance_pipeline_v2.o $(RESISTANCE_OBJS) $(CUDA_OBJS) $(COMMON_OBJS)
	$(CXX) $^ -o $@ $(LDFLAGS)

benchmark_resistance_v2: benchmark_resistance_v2.o $(RESISTANCE_OBJS) $(CUDA_OBJS) $(COMMON_OBJS)
	$(CXX) $^ -o $@ $(LDFLAGS)

# Compile C++ files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Compile CUDA files
%.o: %.cu
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

# Special rule for common directory files
../../common/%.o: ../../common/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

../../common/%.o: ../../common/%.cu
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

# Run tests
test: test_resistance_pipeline_v2
	./test_resistance_pipeline_v2

# Run with real data
test-real: test_resistance_pipeline_v2
	./test_resistance_pipeline_v2 ../data/569_A_038_R1.fastq.gz

# Run benchmark
benchmark: benchmark_resistance_v2
	./benchmark_resistance_v2 ../data/569_A_038_R1.fastq.gz

# Generate clinical reports
reports: test_resistance_pipeline_v2
	./test_resistance_pipeline_v2
	@echo "Reports generated in diagnostic_test_output/"

clean:
	rm -f *.o $(TARGETS) 
	rm -f ../../common/io/*.o ../../common/gpu/*.o ../../common/config/*.o ../../common/pipeline/*.o
	rm -rf diagnostic_test_output/

.PHONY: all clean test test-real benchmark reports
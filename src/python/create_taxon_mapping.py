#!/usr/bin/env python3
"""
Create a taxon mapping file from the database summary
"""

import os
import re
import argparse

def parse_database_summary(summary_file):
    """Parse the database summary to extract taxon IDs and species names"""
    taxon_mapping = {}
    
    with open(summary_file, 'r') as f:
        for line in f:
            # Look for lines with species info: "Species_name (taxid 12345): ..."
            match = re.match(r'^(.+?)\s+\(taxid\s+(\d+)\):\s+', line)
            if match:
                species_name = match.group(1).strip()
                taxon_id = int(match.group(2))
                # Convert spaces to underscores for consistency
                species_name = species_name.replace(' ', '_')
                taxon_mapping[taxon_id] = species_name
    
    return taxon_mapping

def write_taxon_mapping(taxon_mapping, output_file):
    """Write taxon mapping to a simple text file"""
    with open(output_file, 'w') as f:
        f.write("# Taxon ID to Species Name Mapping\n")
        f.write("# Format: taxon_id<tab>species_name\n")
        f.write("# This file is automatically generated from the database\n\n")
        
        for taxon_id, species_name in sorted(taxon_mapping.items()):
            f.write(f"{taxon_id}\t{species_name}\n")

def main():
    parser = argparse.ArgumentParser(description="Create taxon mapping from database")
    parser.add_argument("database_dir", help="Path to database directory")
    args = parser.parse_args()
    
    summary_file = os.path.join(args.database_dir, "database_summary.txt")
    output_file = os.path.join(args.database_dir, "taxon_mapping.txt")
    
    if not os.path.exists(summary_file):
        print(f"Error: Database summary file not found: {summary_file}")
        return 1
    
    print(f"Parsing database summary: {summary_file}")
    taxon_mapping = parse_database_summary(summary_file)
    
    print(f"Found {len(taxon_mapping)} species in database")
    
    write_taxon_mapping(taxon_mapping, output_file)
    print(f"Written taxon mapping to: {output_file}")
    
    return 0

if __name__ == "__main__":
    exit(main())